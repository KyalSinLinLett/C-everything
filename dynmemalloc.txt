C dynamic memory allocation
---------------------------
use functions: malloc(), calloc(), free(), realloc() -> defined in the <stdlib.h>

As you know, a array is a collection of a fixed number of values. Once the size of an array is declared, you cannot change it.

Sometimes, the size of the array declared may not be enough. To solve this issue, you can dynamically allocate memory manually during run-time.

malloc()
--------
function: malloc does not clear the memory it allocates. It reserves a block of memory of the specified number of bytes (leaves the memory block uninitialized)
return: returns a pointer of type void which an be casted into pointers of any form, NULL if cannot be allocated.
syntax: ptr = (castType*)malloc(size); -> ptr holds the address of the first byte in the allocated memory

calloc()
--------
function: calloc clears the memory it allocates. Allocates memory and initializes all bits to zero. 
return: returns a pointer of type void which an be casted into pointers of any form, NULL if cannot be allocated.
syntax: ptr = (castType*)calloc(n, size); -> allocates contiguous space in memory for 25 elements of a certain type. The size parameter represents the sizeof(type) value. (using sizeof to represent the data type we want because there is no type-checking in C)

free()
------
function: dynamically allocated memory created with either calloc() or malloc() doesn't get freed on their own. You must explicitly use free() to release the space.
syntax: free(ptr);

realloc()
---------
function: you can change the size of previously allocated memory using the realloc() function if insufficient or more than required. It does not overwrite the initial/old content. 
syntax: ptr = realloc(ptr, x);





